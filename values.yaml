# Default values for smartface.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  image:
    # -- Overrides the Docker registry globally for all images
    registry: "registry.gitlab.com"

# -- Overrides the chart's name
nameOverride: null
# -- Common annotations for all deployments/StatefulSets
annotations: {}
# -- Common annotations for all pods
podAnnotations: {}
# -- Common labels for all pods
podLabels: {}
# -- Common annotations for all services
serviceAnnotations: {}
# -- Common labels for all services
serviceLabels: {}
# -- Common revisionHistoryLimit for all deployments
revisionHistoryLimit:
# -- Common updateStrategy for all deployments
updateStrategy: {}

# -- docker secrets used to pull images with
imagePullSecrets:
  - name: "sf-gitlab-registry-creds"

configurations:
  database:
    # -- connection string needs to be provided as a dependency of the chart
    existingSecretName: "db-cs"
    # -- key within the existing secret which contains the connection string, see https://learn.microsoft.com/en-us/dotnet/framework/data/adonet/connection-strings
    connectionStringKey: "cs"
  s3:
    # -- supply to bring your own configmap. the configmap needs following keys: `name`, `region`, `folder`, `authType` and `useBucketRegion`
    existingConfigMapName: ""
    # -- name of S3 bucket
    bucketName: ""
    # -- system name of AWS region of S3 bucket e.g. `eu-central-1`
    bucketRegion: ""
    # -- prefix (folder) used for S3 objects
    bucketFolder: ""
    # -- type of authentication to be used. Currently `AssumedRole` and `InstanceProfile` are usable
    authType: "AssumedRole"
    # -- mechanism to resolve bucket endpoint - if `true` then connection is made based on bucket region. If `false` then bucket endpoint needs to be set manually
    useBucketRegion: true
  license:
    secretName: "iface-lic"
    volumeMountName: "license"
    mountPath: "/etc/innovatrics"
  apiAuth:
    # -- supply to bring your own configmap. the configmap needs following keys: `authority`, `audience`, `oauth_token_url` and `oauth_authorize_url`
    existingConfigMapName: ""
    # -- issuer of JWT which the API will trust
    authority: ""
    # -- audience representing the API
    audience: ""
    # -- used only for enabling OAuth flows in swagger UI
    oauthTokenUrl: ""
    # -- used only for enabling OAuth flows in swagger UI
    oauthAuthorizeUrl: ""
  stationAuth:
    # -- config containing authorization configuration for SF Station used when authentication is enabled for SF Station
    configName: "station-auth-config"
    secretName: "station-client-id"
  # -- array of pre-defined watchlist member labels
  watchlistMemberLabels: []
    # - label: "employeeNumber"
    #   displayName: "Employee Number"
    # - label: "registrationPlate"
    #   displayName: "Registration Plate"
  # If the faceTemplateCompatibilityVersion value is null, the default value is used.
  # Example of possible values: 1.40, 1.39
  # It is specifically intended for use during the process of migrating templates
  # Use this setting with caution, becouse it can break functionality
  facetemplate:
    compatibilityVersion: null
    extractionAlgorithm: null

features:
  multitenancy:
    # -- enabled for multitenant deployment
    enabled: false
  edgeStreams:
    # -- sf-tenant-management.enabled needs to be enabled since tenant operator is responsible for populating wlStream
    enabled: false
  objectDetection:
    # -- enable object detector, which can detect objects and pedestrian
    enabled: false
  offlineVideoProcessing:
    # -- enable offline video processing services
    enabled: false
experimentalFeatures:
  qr:
    # -- enable qr modality
    enabled: false

# -- config for rabbitmq subchart, see https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq
rabbitmq:
  # -- configure if rabbitmq subchart should be included
  enabled: true
  extraPlugins: "rabbitmq_stream rabbitmq_stream_management rabbitmq_mqtt"
  # -- service to publicly expose mqtt interface to be used by edge streams. Currently requires ALB controller https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.6/
  mqttPublicService:
    enabled: false
    mqttDnsHost: ""
  # -- if rabbitmq subchart is not included, then we need user-supplied configuration to satisfy SmartFace dependency on rabbitmq
  rmqConfiguration:
    # -- supply to bring your own configmap. The configmap needs following keys: `hostname`, `username`, `port`, `useSsl`, and optionally `streamsPort` when `features.edgeStreams.enabled` is `true`. Other configuration is not used if You provide existing config map.
    existingConfigMapName: ""
    # -- username for existing RabbitMQ instance
    username: ""
    # -- hostname of existing RabbitMQ instance
    hostname: ""
    # -- port of existing RabbitMQ instance
    port: 5672
    # -- set to `true` if existing RabbitMQ instance uses TLS
    useSsl: false
    # -- port for RabbitMQ streams protocol used only when `features.edgeStreams.enabled` is `true`
    streamsPort: 5552
  # -- if rabbitmq subchart is not included, then we need user-supplied configuration to satisfy SmartFace dependency on MQTT broker when `features.edgeStreams.enabled` is `true`
  mqttConfiguration:
    # -- supply to bring your own configmap. The configmap needs following keys: `hostname`, `username`, `port`, and `useSsl`. Other configuration is not used if You provide existing config map.
    existingConfigMapName: ""
    # -- username for existing RabbitMQ instance
    username: ""
    # -- hostname of existing MQTT broker
    hostname: ""
    # -- port of existing MQTT broker
    port: 1883
    # -- set to `true` if existing MQTT broker uses TLS
    useSsl: false
  auth:
    # -- supply to bring you own secret. The secret needs to contain rabbitmq password under the key with name defined in `rabbitmq.auth.secretKey`
    existingSecretName: ""
    # -- define key of rabbitmq password in existing/provisioned secret
    secretKey: "rabbitmq-password"
    # -- username of created user in case that `rabbitmq.enabled` is `true`
    username: "smartface"
    # -- used by subchart
    erlangCookie: ""
    # -- used by subchart
    password: ""
  service:
    extraPorts:
      - name: mqtt
        port: 1883
        targetPort: 1883
      - name: rmq-stream
        port: 5552
        targetPort: 5552

# -- config for minio subchart, see https://github.com/bitnami/charts/tree/main/bitnami/minio
minio:
  enabled: true
  defaultBuckets: "smartface"

# -- config for postgresql subchart, see https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  enabled: true
  primary:
    initdb:
      scripts:
        create-database.sql: "CREATE DATABASE smartface"

api:
  enabled: true
  name: "api"
  servicePort: 80
  containerPort: 80
  dnsHost: ""
  initMigration: true
  # -- Annotations for api deployment
  annotations: {}
  # -- Annotations for api pods
  podAnnotations: {}
  # -- Additional labels for each api pod
  podLabels: {}
  service:
    # -- Annotations for api Service
    annotations: {}
    # -- Additional labels for api Service
    labels: {}
  pdb:
    # -- create PodDisruptionBudget for api component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "300M"
      cpu: "250m"
    limits:
      memory: "4G"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-api
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the api component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

authApi:
  enabled: false
  name: "auth-api"
  servicePort: 8098
  containerPort: 80
  dnsHost: ""
  initMigration: true
  # -- Annotations for authApi deployment
  annotations: {}
  # -- Annotations for authApi pods
  podAnnotations: {}
  # -- Additional labels for each authApi pod
  podLabels: {}
  service:
    # -- Annotations for authApi Service
    annotations: {}
    # -- Additional labels for authApi Service
    labels: {}
  pdb:
    # -- create PodDisruptionBudget for authApi component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "300M"
      cpu: "250m"
    limits:
      memory: "4G"
  nodeSelector: {}
  tolerations: []
  # -- number of replicas to use when autoscaling is not enabled for this component
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-api
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the auth-api component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

dbSynchronizationLeader:
  # -- features.multitenancy needs to be enabled since tenant operator is responsible for populating wlStream
  enabled: false
  name: "db-synchronization-leader"
  servicePort: 8100
  containerPort: 80
  dnsHost: ""
  enableAuth: false
  # -- Annotations for dbSynchronizationLeader deployment
  annotations: {}
  # -- Annotations for dbSynchronizationLeader pods
  podAnnotations: {}
  # -- Additional labels for each dbSynchronizationLeader pod
  podLabels: {}
  service:
    # -- Annotations for dbSynchronizationLeader Service
    annotations: {}
    # -- Additional labels for dbSynchronizationLeader Service
    labels: {}
  pdb:
    # -- create PodDisruptionBudget for dbSynchronizationLeader component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "300M"
      cpu: "250m"
    limits:
      memory: "4G"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-db-synchronization-leader
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the dbSynchronizationLeader component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

graphqlApi:
  enabled: true
  name: "graphql-api"
  servicePort: 8097
  containerPort: 80
  dnsHost: ""
  enableAuth: false
  initMigration: false
  # -- Annotations for graphqlApi deployment
  annotations: {}
  # -- Annotations for graphqlApi pods
  podAnnotations: {}
  # -- Additional labels for each graphqlApi pod
  podLabels: {}
  service:
    # -- Annotations for graphqlApi Service
    annotations: {}
    # -- Additional labels for graphqlApi Service
    labels: {}
  pdb:
    # -- create PodDisruptionBudget for graphqlApi component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "300M"
      cpu: "250m"
    limits:
      memory: "4G"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-graphql-api
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the graphqlApi component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

ingress:
  # -- enable creation of ingress object
  enabled: true
  # -- set ingress class
  class: ""
  # -- supply custom ingress annotation
  annotations:
  # -- if enabled then the ingress will include default ALB annotations
  includeAlbAnnotations: false
  # -- only used if includeAlbAnnotations == true
  certificateArn: ""

detector:
  name: "detector"
  # -- Annotations for detector deployment
  annotations: {}
  # -- Annotations for detector pods
  podAnnotations: {}
  # -- Additional labels for each detector pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for detector component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "600M"
      cpu: "750m"
    limits:
      memory: "1500M"
  nodeSelector: {}
  tolerations: []
  # -- number of replicas to use when autoscaling is not enabled for this component
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-detector
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # -- Determines which face detection models are loaded at startup. You can specify one or more detection modes.
  warmupDetectionAlgorithms:
    - balanced_mask
    #- fast
    #- accurate_mask
    #- balanced_experimental
  # --  Additional environment variables for the detector component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

objectDetector:
  enabled: false
  name: "object-detector"
  detectionAlgorithm: accurate
  # -- Annotations for object detector deployment
  annotations: {}
  # -- Annotations for object detector pods
  podAnnotations: {}
  # -- Additional labels for each object detector pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for object detector component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "600M"
      cpu: "750m"
    limits:
      memory: "1500M"
  nodeSelector: {}
  tolerations: []
  # -- number of replicas to use when autoscaling is not enabled for this component
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-object-detector
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the objectDetector component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

extractor:
  name: "extractor"
  # -- Annotations for extractor deployment
  annotations: {}
  # -- Annotations for extractor pods
  podAnnotations: {}
  # -- Additional labels for each extractor pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for extractor component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "500M"
      cpu: "750m"
    limits:
      memory: "1G"
  nodeSelector: {}
  tolerations: []
  # -- number of replicas to use when autoscaling is not enabled for this component
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-extractor
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the extractor component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

matcher:
  name: "matcher"
  # -- Annotations for matcher deployment
  annotations: {}
  # -- Annotations for matcher pods
  podAnnotations: {}
  # -- Additional labels for each matcher pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for matcher component. Only works when `features.multitenancy` is disabled as PDB is not compatible with tenant operator
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "200M"
      cpu: "750m"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-matcher
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the matcher component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

liveness:
  name: "liveness"
  # -- Annotations for liveness deployment
  annotations: {}
  # -- Annotations for liveness pods
  podAnnotations: {}
  # -- Additional labels for each liveness pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for liveness component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "200M"
      cpu: "750m"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-liveness
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the liveness component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

relayController:
  name: "relay-controller"
  servicePort: 8080
  containerPort: 8080
  dnsHost: ""
  # -- Annotations for relayController deployment
  annotations: {}
  # -- Annotations for relayController pods
  podAnnotations: {}
  # -- Additional labels for each relayController pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for relayController component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  service:
    # -- Annotations for api Service
    annotations: {}
    # -- Additional labels for api Service
    labels: {}
  resources:
    requests:
      memory: "300M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-relay-controller
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: "0.1.0.21"
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the relayController component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

edgeStreamProcessor:
  name: "edge-stream-processor"
  # -- Annotations for edgeStreamProcessor deployment
  annotations: {}
  # -- Annotations for edgeStreamProcessor pods
  podAnnotations: {}
  # -- Additional labels for each edgeStreamProcessor pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for edgeStreamProcessor component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-edge-stream-processor
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the edgeStreamProcessor component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

edgeStreamsStateSync:
  name: "edge-streams-state-synchronizer"
  # -- Annotations for edgeStreamsStateSync deployment
  annotations: {}
  # -- Annotations for edgeStreamsStateSync pods
  podAnnotations: {}
  # -- Additional labels for each edgeStreamsStateSync pod
  podLabels: {}
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-edge-streams-state-synchronizer
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the edgeStreamsStateSync component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

wlStreamPopulationJob:
  enabled: false
  resources: {}
  nodeSelector: {}
  tolerations: []
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-admin
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent

base:
  name: "base"
  zmqServicePort: 2406
  zmqContainerPort: 2406
  # -- Annotations for base deployment
  annotations: {}
  # -- Annotations for base pods
  podAnnotations: {}
  # -- Additional labels for each base pod
  podLabels: {}
  service:
    # -- Annotations for base Service
    annotations: {}
    # -- Additional labels for base Service
    labels: {}
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-base
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the base component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

faceMatcher:
  name: "face-matcher"
  # -- Annotations for faceMatcher deployment
  annotations: {}
  # -- Annotations for faceMatcher pods
  podAnnotations: {}
  # -- Additional labels for each faceMatcher pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for faceMatcher component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-face-matcher
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the faceMatcher component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

accessController:
  name: "access-controller"
  authServiceName: "auth-access-controller"
  dnsHost: ""
  servicePort: 5050
  containerPort: 80
  authServicePort: 5051
  authContainerPort: 5051
  # -- Annotations for accessController deployment
  annotations: {}
  # -- Annotations for accessController pods
  podAnnotations: {}
  # -- Additional labels for each accessController pod
  podLabels: {}
  service:
    # -- Annotations for accessController Service
    annotations: {}
    # -- Additional labels for accessController Service
    labels: {}
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-access-controller
    # -- Access Controller follows different versioning, so the chart app needs to be overridden
    tag: "v5_1.13"
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  mqttConfig:
    enabled: true
    topic: "edge-stream/{sourceId}/access-notifications/{notificationType}"
    sendImageData: false
  filterConfiguration:
    faceOrderConfiguration:
      enabled: true
      order: 1
    openingDebounceConfiguration:
      openingDebounceEnabled: true
      openingDebounceMs: 4000
    spoofCheckConfiguration:
      enabled: false
      denyingDebounceMs: 4000
  # --  Additional environment variables for the accessController component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

station:
  enabled: false
  name: "station"
  servicePort: 8000
  containerPort: 80
  dnsHost: ""
  # -- Annotations for station deployment
  annotations: {}
  # -- Annotations for station pods
  podAnnotations: {}
  # -- Additional labels for each station pod
  podLabels: {}
  service:
    # -- Annotations for station Service
    annotations: {}
    # -- Additional labels for station Service
    labels: {}
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-station
    # -- Smartface Station follows different versioning, so the chart app needs to be overridden
    tag: "v5_1.28.0"
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the station component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

streamDataDbWorker:
  name: "stream-data-db-worker"
  # -- Annotations for streamDataDbWorker deployment
  annotations: {}
  # -- Annotations for streamDataDbWorker pods
  podAnnotations: {}
  # -- Additional labels for each streamDataDbWorker pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for streamDataDbWorker component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-streamdatadbworker
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the streamDataDbWorker component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

VideoAggregator:
  name: "video-aggregator"
  # -- Annotations for VideoAggregator deployment
  annotations: {}
  # -- Annotations for VideoAggregator pods
  podAnnotations: {}
  # -- Additional labels for each VideoAggregator pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for VideoAggregator component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "600M"
      cpu: "750m"
    limits:
      memory: "1500M"
  nodeSelector: {}
  tolerations: []
  # -- number of replicas to use when autoscaling is not enabled for this component
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-video-aggregator
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the VideoAggregator component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

VideoCollector:
  name: "video-collector"
  # -- Annotations for VideoCollector deployment
  annotations: {}
  # -- Annotations for VideoCollector pods
  podAnnotations: {}
  # -- Additional labels for each VideoCollector pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for VideoCollector component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "600M"
      cpu: "750m"
    limits:
      memory: "1500M"
  nodeSelector: {}
  tolerations: []
  # -- number of replicas to use when autoscaling is not enabled for this component
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-video-collector
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
  # --  Additional environment variables for the VideoCollector component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

VideoReader:
  name: "video-reader"
  # -- Annotations for VideoReader deployment
  annotations: {}
  # -- Annotations for VideoReader pods
  podAnnotations: {}
  # -- Additional labels for each VideoReader pod
  podLabels: {}
  pdb:
    # -- create PodDisruptionBudget for VideoReader component
    create: false
    minAvailable: 1
    maxUnavailable: ""
  resources:
    requests:
      memory: "600M"
      cpu: "750m"
    limits:
      memory: "1500M"
  nodeSelector: {}
  tolerations: []
  # -- number of replicas to use when autoscaling is not enabled for this component
  replicas: 1
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-video-reader
    # -- Overrides the image tag whose default is the chart's appVersion
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent
    # --  Additional environment variables for the VideoReader component
  # extraVars:
  #  - name: EXTRA_VAR1
  #    value: "value1"
  #  - name: EXTRA_VAR2
  #    value: "value2"

jaegerTracing:
  enabled: true
  hostname: grafana-agent.monitoring.svc.cluster.local

migration:
  enabled: true
  skipWlStreamMigration: false
  initContainer:
    resources: {}
    image:
      # -- The Docker registry, overrides `global.image.registry`
      registry: null
      # -- Docker image repository
      repository: innovatrics/smartface/sf-admin
      # -- Overrides the image tag whose default is the chart's appVersion
      tag: null
      # -- Overrides the image tag with an image digest
      digest: null
      # -- Docker image pull policy
      pullPolicy: IfNotPresent

autoscaling:
  cron:
    # -- enables predefined workhours-based cron triggers on ScaledObjects
    enabled: false
    # -- see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    timezone: "Europe/Bratislava"
    # -- Schedules for scaling, cron expression format: "minute hour day-of-month month day-of-week"
    schedules:
      workHours:
        start: "0 8 * * 1-5"
        end: "0 17 * * 1-5"
      nonWorkHours:
        start: "0 17 * * 1-5"
        end: "0 8 * * 1-5"
      weekend:
        start: "0 0 * * 6,0"
        end: "0 8 * * 1"
    detector:
      workHoursReplicas: 2
      nonWorkHoursReplicas: 1
    objectDetector:
      workHoursReplicas: 2
      nonWorkHoursReplicas: 1
    extractor:
      workHoursReplicas: 2
      nonWorkHoursReplicas: 1
    api:
      workHoursReplicas: 2
      nonWorkHoursReplicas: 1
  rmq:
    # -- enables predefined rabbitmq triggers based on requests per second on ScaledObjects
    enabled: false
    triggerAuthName: "keda-trigger-auth-rabbitmq-conn"
    hostSecretName: "rmq-management-uri-with-creds"
    detector:
      requestsPerSecond: 15
    objectDetector:
      requestsPerSecond: 3
    extractor:
      requestsPerSecond: 12
    api:
      requestsPerSecond: 17
  detector:
    # -- enables ScaledObject for detector
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    # -- provide additional triggers - see https://keda.sh/docs/2.12/concepts/scaling-deployments/#triggers
    triggers: []
  objectDetector:
    # -- enables ScaledObject for detector
    enabled: true
    minReplicas: 1
    maxReplicas: 8
    # -- provide additional triggers - see https://keda.sh/docs/2.12/concepts/scaling-deployments/#triggers
    triggers: []
  extractor:
    # -- enables ScaledObject for extractor
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    # -- provide additional triggers - see https://keda.sh/docs/2.12/concepts/scaling-deployments/#triggers
    triggers: []
  api:
    # -- enables ScaledObject for rest API
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    # -- provide additional triggers - see https://keda.sh/docs/2.12/concepts/scaling-deployments/#triggers
    triggers: []

# -- configuration for sf-tenant-management subchart
sf-tenant-management:
  # -- configure if sf-tenant-management subchart should be included
  enabled: false
  apiDnsHost: ""
  config:
    mapName: "operator-config"
    fileName: "appsettings.override.json"
    configDir: "/etc/components"
  installCrd: false
  imagePullSecrets:
    - name: "sf-gitlab-registry-creds"
  api:
    enabled: false
    name: "sf-tenant-api"
    servicePort: 80

countlyPublisher:
  enabled: false
  name: "countly-publisher"
  clusterName: ""
  # -- Annotations for countlyPublisher deployment
  annotations: {}
  # -- Annotations for countlyPublisher pods
  podAnnotations: {}
  # -- Additional labels for each countlyPublisher pod
  podLabels: {}
  service:
    # -- Annotations for countlyPublisher Service
    annotations: {}
    # -- Additional labels for countlyPublisher Service
    labels: {}
  resources:
    requests:
      memory: "100M"
      cpu: "100m"
  nodeSelector: {}
  tolerations: []
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-countly-publisher
    # -- Countly publisher follows different versioning, so the chart app needs to be overridden
    tag: "45"
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent

tests:
  authentication:
    tenant1:
      name: ""
      clientId: ""
      clientSecret: ""
    tenant2:
      name: ""
      clientId: ""
      clientSecret: ""
  # -- Annotations for test pods
  podAnnotations: {}
  # -- Additional labels for test pods
  podLabels: {}
  nodeSelector: {}
  tolerations: []
  image:
    # -- The Docker registry, overrides `global.image.registry`
    registry: null
    # -- Docker image repository
    repository: innovatrics/smartface/sf-cloud-func-tests
    # -- Countly publisher follows different versioning, so the chart app needs to be overridden
    tag: null
    # -- Overrides the image tag with an image digest
    digest: null
    # -- Docker image pull policy
    pullPolicy: IfNotPresent

metrics:
  enabled: false
  publishAllMetrics: true
  monitorDiscoveryLabel:
    instance: primary
  serviceDiscoveryLabels:
    sf-metrics: "true"
  portName: "metrics"
  port: 4318

readonlyApi:
  enabled: false
  authName: "readonly-auth-api"
  noAuthName: "readonly-noauth-api"
  proxyContainer:
    resources: {}
  nodeSelector: {}
  tolerations: []

serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  create: true
  # -- The name of the ServiceAccount to use.
  name: "sf-service-account"
  # -- Image pull secrets for the service account
  imagePullSecrets: []
  # -- Annotations for the service account
  annotations: {}
  # -- Labels for the service account
  labels: {}
  # -- Set this toggle to false to opt out of automounting API credentials for the service account
  automountServiceAccountToken: true

# -- due to ArgoCD limitations this can be used to skip validations that use the `lookup` helm function - for more information see https://github.com/argoproj/argo-cd/issues/5202
skipLookupBasedValidations: false
